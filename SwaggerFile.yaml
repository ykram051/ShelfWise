openapi: 3.0.1
info:
  title: Bookstore API
  description: RESTful web service for managing books, authors, customers, orders, and reports.
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /authors:
    get:
      summary: List all authors or fetch details by ID
      tags:
        - Authors
      parameters:
        - name: id
          in: query
          description: ID of the author to fetch
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of authors or details of a specific author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Create a new author
      tags:
        - Authors
      requestBody:
        description: Author object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author created successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /authors/{id}:
    put:
      summary: Update author details
      tags:
        - Authors
      parameters:
        - name: id
          in: path
          description: ID of the author to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated author object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Author updated successfully
        '404':
          description: Author not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete an author
      tags:
        - Authors
      parameters:
        - name: id
          in: path
          description: ID of the author to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Author deleted successfully
        '400':
          description: Cannot delete author with associated books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /books:
    get:
      summary: List all books or search by criteria
      tags:
        - Books
      parameters:
        - name: title
          in: query
          description: Filter books by title
          required: false
          schema:
            type: string
        - name: author
          in: query
          description: Filter books by author
          required: false
          schema:
            type: string
        - name: genre
          in: query
          description: Filter books by genre
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book
      tags:
        - Books
      requestBody:
        description: Book object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /books/{id}:
    put:
      summary: Update book details
      tags:
        - Books
      parameters:
        - name: id
          in: path
          description: ID of the book to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated book object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a book
      tags:
        - Books
      parameters:
        - name: id
          in: path
          description: ID of the book to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Book deleted successfully
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customers:
    get:
      summary: List all customers or fetch details by ID
      tags:
        - Customers
      parameters:
        - name: id
          in: query
          description: ID of the customer to fetch
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of customers or details of a specific customer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    post:
      summary: Add a new customer
      tags:
        - Customers
      requestBody:
        description: Customer object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customer created successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /customers/{id}:
    put:
      summary: Update customer details
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          description: ID of the customer to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated customer object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer updated successfully
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a customer
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          description: ID of the customer to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Customer deleted successfully
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders:
    get:
      summary: List all orders or fetch within a date range
      tags:
        - Orders
      parameters:
        - name: from
          in: query
          description: Start date for filtering orders
          required: false
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: End date for filtering orders
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Create a new order
      tags:
        - Orders
      requestBody:
        description: Order object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /orders/{id}:
    put:
      summary: Update an existing order
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          description: ID of the order to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated order object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input or insufficient stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Cancel an order
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          description: ID of the order to cancel
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Order cancelled successfully
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /report:
    get:
      summary: Retrieve sales reports within a specified date range
      tags:
        - Reports
      parameters:
        - name: from
          in: query
          description: Start date for report generation
          required: true
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: End date for report generation
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Sales report retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesReport'

components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        bio:
          type: string
      required:
        - id
        - first_name
        - last_name
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        genres:
          type: array
          items:
            type: string
        published_at:
          type: string
          format: date-time
        price:
          type: number
          format: float
        stock:
          type: integer
      required:
        - id
        - title
        - author
        - price
        - stock
    Customer:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        created_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - email
        - address
    Address:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        postal_code:
          type: string
        country:
          type: string
      required:
        - street
        - city
        - state
        - postal_code
    Order:
      type: object
      properties:
        id:
          type: integer
        customer:
          $ref: '#/components/schemas/Customer'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        total_price:
          type: number
          format: float
        created_at:
          type: string
          format: date-time
        status:
          type: string
      required:
        - id
        - customer
        - items
        - total_price
    OrderItem:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/Book'
        quantity:
          type: integer
      required:
        - book
        - quantity
    SalesReport:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        total_revenue:
          type: number
          format: float
        total_orders:
          type: integer
        top_selling_books:
          type: array
          items:
            $ref: '#/components/schemas/BookSales'
      required:
        - timestamp
        - total_revenue
        - total_orders
    BookSales:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/Book'
        quantity_sold:
          type: integer
      required:
        - book
        - quantity_sold
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
      required:
        - error
tags:
  - name: Authors
    description: Operations related to authors
  - name: Books
    description: Operations related to books
  - name: Customers
    description: Operations related to customers
  - name: Orders
    description: Operations related to orders
  - name: Reports
    description: Operations related to reports
